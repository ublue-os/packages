#!/usr/bin/env bash

# Ublue Rebase Helper 2.0

get_config() {
	REBASE_HELPER_CONFIG_FILE="${REBASE_HELPER_CONFIG_FILE:-/etc/ublue-os/rebase_helper.json}"
	QUERY="$1"
	FALLBACK="$2"
	shift
	shift
	OUTPUT="$(jq -r -c "$QUERY" "$REBASE_HELPER_CONFIG_FILE" 2>/dev/null || echo "$FALLBACK")"
	if [ "$OUTPUT" == "null" ] ; then
		echo "$FALLBACK"
		return
	fi
	echo "$OUTPUT"
}

#shellcheck disable=1091
source /usr/lib/ujust/ujust.sh

IMAGE_INFO="${REBASE_HELPER_INFO_FILE:-"/usr/share/ublue-os/image-info.json"}"
IMAGE_NAME=$(jq -r '."image-name"' < "$IMAGE_INFO")
IMAGE_VENDOR=$(jq -r '."image-vendor"' < "$IMAGE_INFO")
IMAGE_REGISTRY="ghcr.io/${IMAGE_VENDOR}"
IMAGE_DATE_SEPARATOR="$(get_config '."image-date-separator"' ".")"
CURRENT_IMAGE=$(rpm-ostree status -b --json | jq -r '.deployments[0]."container-image-reference"')
CURRENT_TAG="$(echo "$CURRENT_IMAGE" | sed "s/.*://")"

echo "$IMAGE_NAME"
echo "$IMAGE_VENDOR"
echo "$IMAGE_REGISTRY"

function list_gh_date_tags() {
    local branch="${1:-$branch}"
    local image_vendor="${2:-$IMAGE_VENDOR}"
    local image_name="${3:-$IMAGE_NAME}"
    local image_date_separator="${4:-IMAGE_DATE_SEPARATOR}"
    local limit="${5:-7}"
    local list_limit="${6:-100}"


    # Check if required arguments are provided
    if [[ -z "$branch" ]]; then
        echo "Error: Branch prefix (for filtering dated tags) is required as argument 1 or via \$branch variable." >&2
        return 1
    fi
    if [[ -z "$image_vendor" ]]; then
        echo "Error: Image owner (user/org) is required as argument 2 or via \$IMAGE_VENDOR variable." >&2
        return 1
    fi
    if [[ -z "$image_name" ]]; then
        echo "Error: Image name is required as argument 3 or via \$IMAGE_NAME variable." >&2
        return 1
    fi

    echo -e >&2 "Attempting to list tags for public image ghcr.io/${image_vendor}/${image_name}"
    echo -e >&2 "This can take a bit of time..."

    # Step 1: Get ghcr.io token anonymously for the public repository
    local repo_scope="repository:${image_vendor}/${image_name}:pull"
    local token_response
    token_response=$(curl -s "https://ghcr.io/token?service=ghcr.io&scope=${repo_scope}")

    local bearer_token
    bearer_token=$(echo "$token_response" | jq -r '.token')

    if [ -z "$bearer_token" ] || [ "$bearer_token" == "null" ]; then
        echo "Error: Failed to obtain ghcr.io bearer token (even anonymously)." >&2
        echo "Please ensure the image 'ghcr.io/${image_vendor}/${image_name}' is public and the name is correct." >&2
        echo "Response from token service: $token_response" >&2
        return 1
    fi

    # Step 2: List tags using the obtained bearer token
    local tag_list_json
    tag_list_json=$(curl -s -H "Authorization: Bearer ${bearer_token}" "https://ghcr.io/v2/${image_vendor}/${image_name}/tags/list?n=${list_limit}")

    # Check if the tags key exists and is an array
    if ! echo "$tag_list_json" | jq -e '.tags? | (type=="array")' > /dev/null; then
        echo "Error: Failed to list tags or unexpected JSON structure from tags/list endpoint." >&2
        echo "Is 'ghcr.io/${image_vendor}/${image_name}' a valid container image path?" >&2
        echo "Response: $tag_list_json" >&2
        return 1
    fi

    # Step 3: Filter, sort, and limit the tags
    # Escape the branch and separator for jq's regex engine.
    local escaped_branch=$(printf '%s\n' "$branch" | sed 's:[][\\/.^$*]:\\&:g')
    local escaped_separator=$(printf '%s\n' "$IMAGE_DATE_SEPARATOR" | sed 's:[][\\/.^$*]:\\&:g')

    # Regex: Match ONLY branch<separator>8digits exactly.
    echo "$tag_list_json" | \
      jq -r '.tags[]? | select(type=="string") | select(test("^'"$escaped_branch$escaped_separator"'\\d{8}$"))' | \
      sort -r | \
      head -n "$limit"

    # Step 4: Check exit status of the pipeline
    local pipe_status=(${PIPESTATUS[@]})
    # Index 0 is curl (already checked somewhat by jq parsing)
    # Index 1 is first jq, Index 2 is sort, Index 3 is head
    if [[ ${pipe_status[1]} -ne 0 || ${pipe_status[2]} -ne 0 || ${pipe_status[3]} -ne 0 ]]; then
         echo "Error: Tag processing pipeline failed. Statuses: [JQ: ${pipe_status[1]}, Sort: ${pipe_status[2]}, Head: ${pipe_status[3]}]" >&2
         return 1
    fi

    return 0 # Success
}

# Generates AVAILABLE_TAGS array from JSON array
AVAILABLE_TAGS="$(get_config '."available-tags"[]' "null")"
AVAILABLE_TAGS=${AVAILABLE_TAGS//\"/""}
mapfile -t AVAILABLE_TAGS < <(echo "$AVAILABLE_TAGS")
if [ "${AVAILABLE_TAGS[*]}" == "null" ] ; then
	echo "Failure listing available tags"
	exit 1
fi

# If AVAILABLE_TAGS contains "lts", only show "lts" as the available tag
if [[ " ${AVAILABLE_TAGS[*]} " =~ " lts " ]]; then
	AVAILABLE_TAGS=("lts")
fi


if [[ " ${AVAILABLE_TAGS[*]} " =~ [[:space:]]${CURRENT_TAG}[[:space:]] ]]; then
  # Remove the current tag from the list of available tags
  # Create a new array without the current tag
  AVAILABLE_TAGS_TEMP=()
  for tag in "${AVAILABLE_TAGS[@]}"; do
    if [[ "$tag" != "$CURRENT_TAG" ]]; then
      AVAILABLE_TAGS_TEMP+=("$tag")
    fi
  done
  AVAILABLE_TAGS=("${AVAILABLE_TAGS_TEMP[@]}")
fi

echo "Which stream would you like to rebase to?"
echo "Available tags: ${AVAILABLE_TAGS[*]}"
# if AVAILABLE_TAGS is empty don't show the menu
if [ ${#AVAILABLE_TAGS[@]} -eq 0 ]; then
  CHOSEN_TAG="$(Choose "Pin to a date" cancel)"
else
  CHOSEN_TAG="$(Choose "Pin to a date" "${AVAILABLE_TAGS[@]}" cancel)"
fi

if [ "${CHOSEN_TAG}" == "Pin to a date" ] ; then
  if [[ " ${AVAILABLE_TAGS[*]} " =~ " lts " ]]; then
	# If "lts" is in the list, show it as the only option
	CHOSEN_TAG="lts"
  else
	# Otherwise, show all available tags
	echo "Which stream do you want to rebase to a specific date to?"
	CHOSEN_TAG="$(Choose all current "${AVAILABLE_TAGS[@]}" cancel)"
	if [[ ! " ${AVAILABLE_TAGS[*]} all current " =~ [[:space:]]${CHOSEN_TAG}[[:space:]] ]]; then
		exit 0
	fi
  fi

	case "$CHOSEN_TAG" in
		"all")
			CHOSEN_TAG=""
			;;

		"current")
			CHOSEN_TAG="$CURRENT_TAG"
			;;

		"cancel")
			exit 0
			;;
	esac

  mapfile -t valid_tags < <(list_tags "$CHOSEN_TAG" "$IMAGE_VENDOR" "$IMAGE_NAME" "$IMAGE_DATE_SEPARATOR" 7 300 | sed 's/\"//g' | sed 's/,//g')
  gum style --foreground 212 --bold --underline "Warning: This will pin you to a specific version, do not forget to rebase back to $(IFS=,; echo "${AVAILABLE_TAGS[*]}") to resume receiving updates."
  CHOSEN_TAG=$(Choose cancel "${valid_tags[@]}" "Show More")
elif [[ ! " ${AVAILABLE_TAGS[*]} " =~ [[:space:]]${CHOSEN_TAG}[[:space:]] ]]; then
	# No valid things were found
	exit 0
fi

if [[ "$CHOSEN_TAG" == "cancel" || "$CHOSEN_TAG" == "" ]] ; then
	exit 0
fi

if [[ "$CHOSEN_TAG" == "Show More" ]] ; then
  mapfile -t valid_tags < <(list_tags "$CHOSEN_TAG" "$IMAGE_VENDOR" "$IMAGE_NAME" "$IMAGE_DATE_SEPARATOR" 30 3000 | sed 's/\"//g' | sed 's/,//g')
  CHOSEN_TAG="$(Choose cancel "${AVAILABLE_TAGS[@]}" "Show Less")"
  if [[ "$CHOSEN_TAG" == "cancel" || "$CHOSEN_TAG" == "" ]] ; then
    exit 0
  fi
fi

if [ "$rebase_target" == "" ] ; then
	rebase_target="$IMAGE_REGISTRY/$IMAGE_NAME:$CHOSEN_TAG"
fi

echo "Rebase target is ${rebase_target}"
if [[ $(Confirm "Do you really wish to rebase?") -ne "0" ]]; then
    exit 1
fi

rpm-ostree rebase "ostree-image-signed:docker://${rebase_target}"
exit 0
