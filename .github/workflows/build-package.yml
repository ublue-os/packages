name: Build packages in CI

on:
  merge_group:
  pull_request:
    types: [labeled]

jobs:
  spec_files:
    runs-on: ubuntu-latest
    # Remove or adjust the condition if you want the job to run on every PR
    if: contains(github.event.pull_request.labels.*.name, 'safe-to-run')
    name: Get all spec files
    outputs:
      specs: ${{ steps.specs.outputs.specs }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get all spec files
        id: specs
        run: |
          set -e
          # Find all files ending in .spec, sort them, and convert paths relative to the workspace
          SPEC_FILES=$(find . -type f -iname '*.spec' | sort | while read -r spec; do
            realpath --relative-to="$GITHUB_WORKSPACE" "$spec"
          done)
          # Convert the list of spec files to a JSON array using jq
          SPEC_JSON=$(echo "$SPEC_FILES" | jq -R -s -c 'split("\n")[:-1]')
          echo "specs=$SPEC_JSON" >> $GITHUB_OUTPUT

  build_packages:
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    needs: spec_files
    name: Build RPM package
    strategy:
      fail-fast: false
      matrix:
        platform: ["arm64","amd64"]
        # These are our target environments
        # FIXME: renovate rule for this would be awesome
        chroot: ["fedora-40", "fedora-41", "epel-10"]
        spec: ${{ fromJson(needs.spec_files.outputs.specs) }}
    steps:
      - uses: actions/checkout@v4

      - name: Install dependencies
        if: matrix.platform == 'arm64'
        run: |
          sudo apt update -y
          sudo apt install -y \
            podman

      - name: Setup Just
        uses: extractions/setup-just@dd310ad5a97d8e7b41793f8ef055398d51ad4de6 # v2

      - name: Build ${{ matrix.spec }}
        id: build_package
        run: |
          set -x
          just=$(which just)

          mkdir -p containers
          MOCK_DIR=./mock
          CONTAINERS_DIR=./containers
          SOURCES_DIR=.
          export CONTAINERS_DIR
          $just build ${{ matrix.spec }} -r ${{ matrix.chroot }}-$(arch)
          SKIPPED_ARCH=false
          if [ -e "$SOURCES_DIR/arch_skipped" ] ; then
            SKIPPED_ARCH=true
          fi
          sudo chown -R $(id -u):$(id -g) $MOCK_DIR
          echo "mock_dir=$MOCK_DIR" >> "$GITHUB_OUTPUT"
          echo "containers_dir=$CONTAINERS_DIR" >> "$GITHUB_OUTPUT"
          echo "sources_dir=$SOURCES_DIR" >> "$GITHUB_OUTPUT"
          echo "skipped_arch=$SKIPPED_ARCH" >> "$GITHUB_OUTPUT"
          echo "package=$(basename "${{ matrix.spec }}" ".spec")" >> "$GITHUB_OUTPUT"

      - name: Upload to Job Artifacts
        if: steps.build_package.outputs.skipped_arch == 'false'
        uses: actions/upload-artifact@4cec3d8aa04e39d1a68397de0c4cd6fb9dce8ec1 # v4
        with:
          name: ${{ matrix.chroot }}-${{ matrix.platform }}-${{ steps.build_package.outputs.package }}
          if-no-files-found: error
          path: |
            ${{ steps.build_package.outputs.mock_dir }}/**/*.rpm

  check:
    name: Check all builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_packages]
    steps:
      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done
