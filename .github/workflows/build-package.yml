name: Build packages in CI

on:
  merge_group:
  pull_request:

jobs:
  changed_files:
    runs-on: ubuntu-latest
    name: Get changed files
    outputs:
      all_changed_files: ${{ steps.changed-package-files.outputs.all_changed_files }}
      any_changed: ${{ steps.changed-package-files.outputs.any_changed }}
      specs: ${{ steps.packages.outputs.specs }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Get directories with spec files
        id: specdirs
        run: |
          set -x
          FILESLIST=./files.txt
          # The extra xargs there is so that the changed-files action can find all the files
          find . -type f -iname '*.spec' -exec 'dirname' '{}' ';' 2>/dev/null | xargs -I{} echo "{}/**" > $FILESLIST
          echo "fileslist=$FILESLIST" >> $GITHUB_OUTPUT

      - name: Get all changed files from package directores
        id: changed-package-files
        uses: step-security/changed-files@3dbe17c78367e7d60f00d78ae6781a35be47b4a1 # v45
        with:
          files_from_source_file: ${{ steps.specdirs.outputs.fileslist }}

      - name: Get all packages that need to be rebuilt
        id: packages
        if: steps.changed-package-files.outputs.any_changed == 'true'
        env:
          ALL_CHANGED_FILES: ${{ steps.changed-package-files.outputs.all_changed_files }}
        run: |
          set -x

          ALL_SPECS=()
          for file in ${ALL_CHANGED_FILES}; do
            for spec in $(dirname $file)/*.spec ; do
              ALL_SPECS+=( "$(realpath "--relative-to=${GITHUB_WORKSPACE}" "${spec}")" )
            done
          done

          # Cleans up duplicate spec entries
          IFS=" " read -r -a ALL_SPECS <<< "$(echo "${ALL_SPECS[@]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')"
          
          MATRIX="{\"specs\":[]}"
          for spec in $ALL_SPECS ; do
              [ -e "$spec" ] && MATRIX=$(jq -c ".specs += [\"$spec\"]" <<< $MATRIX)
          done

          if [ "$(jq -c '.specs' <<< $MATRIX)" == "" ]; then
              echo "Spec file was not bumped, failed because we dont know which package to build"
              exit 1
          fi

          echo "specs=$(jq -c '.specs' <<< $MATRIX)" >> $GITHUB_OUTPUT

  build_packages:
    runs-on: ${{ matrix.platform == 'amd64' && 'ubuntu-24.04' || 'ubuntu-24.04-arm' }}
    needs: changed_files
    name: Build RPM package
    if: needs.changed_files.outputs.any_changed == 'true'
    strategy:
      fail-fast: false
      matrix:
        platform: ["arm64","amd64"]
        # These are our target environments
        # FIXME: renovate rule for this would be awesome
        chroot: ["fedora-41", "fedora-42", "epel-10"]
        spec: ${{ fromJson(needs.changed_files.outputs.specs) }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4

      - name: Install dependencies
        if: matrix.platform == 'arm64'
        run: |
          sudo apt update -y
          sudo apt install -y \
            podman

      - name: Setup Just
        uses: extractions/setup-just@e33e0265a09d6d736e2ee1e0eb685ef1de4669ff # v3

      - name: Build ${{ matrix.spec }}
        id: build_package
        run: |
          set -x
          just=$(which just)

          mkdir -p containers
          MOCK_DIR=./mock
          CONTAINERS_DIR=./containers
          SOURCES_DIR=.
          export CONTAINERS_DIR
          if ! $just build ${{ matrix.spec }} -r ${{ matrix.chroot }}-$(arch) ; then
            echo "Retrying with a network connection"
            $just build ${{ matrix.spec }} -r ${{ matrix.chroot }}-$(arch) --enable-network
          fi
          SKIPPED_ARCH=false
          if [ -e "$SOURCES_DIR/arch_skipped" ] ; then
            SKIPPED_ARCH=true
          fi
          sudo chown -R $(id -u):$(id -g) $MOCK_DIR
          echo "mock_dir=$MOCK_DIR" >> "$GITHUB_OUTPUT"
          echo "containers_dir=$CONTAINERS_DIR" >> "$GITHUB_OUTPUT"
          echo "sources_dir=$SOURCES_DIR" >> "$GITHUB_OUTPUT"
          echo "skipped_arch=$SKIPPED_ARCH" >> "$GITHUB_OUTPUT"
          echo "package=$(basename "${{ matrix.spec }}" ".spec")" >> "$GITHUB_OUTPUT"

      - name: Upload to Job Artifacts
        if: steps.build_package.outputs.skipped_arch == 'false'
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4
        with:
          name: ${{ matrix.chroot }}-${{ matrix.platform }}-${{ steps.build_package.outputs.package }}
          if-no-files-found: error
          path: |
            ${{ steps.build_package.outputs.mock_dir }}/**/*.rpm

  check:
    name: Check all builds successful
    if: always()
    runs-on: ubuntu-latest
    needs: [build_packages]
    steps:
      - name: Check Jobs
        env:
          JOBS: ${{ toJson(needs) }}
        run: |
          echo "Job status:"
          echo $JOBS | jq -r 'to_entries[] | " - \(.key): \(.value.result)"'

          for i in $(echo $JOBS | jq -r 'to_entries[] | .value.result'); do
            if [ "$i" != "success" ] && [ "$i" != "skipped" ]; then
              echo ""
              echo "Status check not okay!"
              exit 1
            fi
          done
